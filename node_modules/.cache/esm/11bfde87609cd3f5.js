let appRoot,winston;_609‍.x([["default",()=>_609‍.o]]);_609‍.w("app-root-path",[["*",null,function(v){appRoot=v}]]);_609‍.w("winston",[["*",null,function(v){winston=v}]]);



const { createLogger, transports, format } = winston

const {
  timestamp: timestampFn,
  combine,
  printf,
  colorize,
  prettyPrint,
} = format

var options = {
  file: {
    level: 'info',
    filename: `./app.log`,
    handleExceptions: true,
    json: true,
    maxsize: 5242880, // 5MB
    maxFiles: 5,
    colorize: false,
  },
  console: {
    level: 'debug',
    handleExceptions: true,
    json: false,
    colorize: true,
  },
}

const myFormat = printf(
  ({ level, message, timestamp }) => `${timestamp}: ${level}----> ${message} `
)

const logger = createLogger({
  format: combine(colorize(), timestampFn(), prettyPrint(), myFormat),
  transports: [new winston.transports.File(options.file)],
  exitOnError: false, // do not exit on handled exceptions
})

logger.add(new transports.Console())

winston.addColors({
  info: 'green',
  error: 'red',
})
logger.on('error', (err) => _609‍.g.console.error(err.message))

logger.stream = {
  write: function (message, encoding) {
    logger.info(message)
  },
}

_609‍.d(logger);

// module.exports = logger
