let dotenv,http,logger,app,connectToMongo;_7d6‚Äç.x([["default",()=>_7d6‚Äç.o]]);_7d6‚Äç.w("dotenv",[["default",["dotenv"],function(v){dotenv=v}]]);_7d6‚Äç.w("http",[["default",["http"],function(v){http=v}]]);_7d6‚Äç.w("./utils/logger.js",[["default",["logger"],function(v){logger=v}]]);_7d6‚Äç.w("./app.js",[["default",["app"],function(v){app=v}]]);_7d6‚Äç.w("./utils/connectToMongo.js",[["default",["connectToMongo"],function(v){connectToMongo=v}]]);




dotenv.config()

const port = process.env.PORT || 3000
const server = http.createServer(app)

console.log('x')

process.on('uncaughtException', (err) => {
  console.log('uncaught exceptions, shutting down')
  server.close(() => {
    process.exit(1)
  })
})

const startServer = async () => {
  logger.info('connecting to the databse')
  await connectToMongo()
  server.listen(PORT, () => {
    console.log(`
        ################################################
        üõ°Ô∏è  Server listening on port: ${port} üõ°Ô∏è
        ################################################
        SERVER IN ${process.env.NODE_ENV} MODE
      `)
  })
}

startServer()

process.on('unhandledRejection', (err) => {
  console.log('Unhandled rejection, shutting down')
  server.close(() => {
    process.exit(1)
  })
})

_7d6‚Äç.d(app);
